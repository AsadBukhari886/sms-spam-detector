import os
import joblib
import re
import requests

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv

# --- Configuration ---
# Load .env file from the current directory
load_dotenv()

# Constants for the Groq API
GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"
GROQ_MODEL = "llama3-8b-8192"

# --- FastAPI App Initialization ---
app = FastAPI(title="Spam and AI Detector API")

# Allow frontend to connect (CORS)
origins = ["http://localhost:3000"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Loading Machine Learning Model ---
try:
    # Load the pre-trained spam detection model and vectorizer
    spam_model = joblib.load("spam_classifier.pkl")
except FileNotFoundError:
    raise RuntimeError("File not found! Make sure 'spam_classifier.pkl' is in the same directory as main.py.")

# --- Pydantic Model for Request Body ---
class TextIn(BaseModel):
    text: str

# --- Helper Functions ---
def clean_text(text: str) -> str:
    """Pre-processes text for the spam detection model."""
    text = text.lower()
    text = re.sub(r'[^a-z0-9\s]', '', text)
    return text

def get_ai_score_from_groq(text: str):
    """
    Contacts the Groq API to get an AI-generated content score.
    Returns an integer score (0-100) on success, or an error string on failure.
    """
    api_key = os.getenv("GROQ_API_KEY")
    if not api_key:
        print("DEBUG: GROQ_API_KEY not found. Ensure it's in your .env file.")
        return "Error: GROQ_API_KEY is not configured on the server."

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }

    payload = {
        "model": GROQ_MODEL,
        "messages": [
            {
                "role": "system",
                "content": (
                    "You are an expert AI content detector. Your task is to analyze the user's text "
                    "and determine the probability that it was generated by an AI. "
                    "Respond ONLY with a single integer number from 0 to 100, representing this probability. "
                    "Do not include any other words, symbols, or explanations. Just the number."
                )
            },
            {"role": "user", "content": text},
        ],
        "temperature": 0.1,
        "max_tokens": 10, # We only need a number, so limit the response size
    }

    try:
        response = requests.post(
            GROQ_API_URL, headers=headers, json=payload, timeout=20
        )

        # Check for HTTP errors (e.g., 401 Unauthorized, 429 Rate Limit)
        response.raise_for_status()

        data = response.json()

        # Safer parsing of the API response
        if data.get("choices") and len(data["choices"]) > 0:
            ai_response_text = data["choices"][0].get("message", {}).get("content", "").strip()

            # Find the first sequence of digits in the response
            match = re.search(r"\d+", ai_response_text)
            if match:
                return int(match.group())
            else:
                print(f"DEBUG: Could not parse number from AI response: '{ai_response_text}'")
                return "Error: AI response was not a number."
        else:
            print(f"DEBUG: 'choices' field was empty or missing in Groq response: {data}")
            return "Error: Invalid response from AI service."

    except requests.exceptions.HTTPError as http_err:
        # Handle specific HTTP errors like 401 (bad API key) or 429 (rate limit)
        print(f"DEBUG: HTTP Error connecting to Groq API: {http_err}")
        if response.status_code == 401:
            return "Error: Invalid API Key."
        return f"Error: HTTP {response.status_code}."

    except requests.exceptions.Timeout:
        print("DEBUG: Request to Groq API timed out.")
        return "Error: AI detection timed out."

    except requests.exceptions.RequestException as e:
        # Handle other network-related errors (e.g., DNS failure, connection refused)
        print(f"DEBUG: General network error connecting to Groq API: {e}")
        return "Error: Could not connect to AI service."

# --- API Endpoints ---
@app.post("/analyze")
def analyze_text(request: TextIn):
    """
    Analyzes input text for spam and AI-generated content.
    """
    # 1. Spam Detection
    cleaned_input_text = clean_text(request.text)
    prediction = spam_model.predict([cleaned_input_text])[0]
    spam_result = "Spam" if prediction == 1 else "Not Spam"

    # 2. AI Content Detection
    ai_percentage = get_ai_score_from_groq(request.text)

    return {
        "spam_detection": {"result": spam_result, "prediction_code": int(prediction)},
        "ai_detection": {"percentage": ai_percentage}
    }

@app.get("/")
def root():
    """Root endpoint to check if the API is running."""
    return {"message": "Spam & AI Detector API is running correctly"}
